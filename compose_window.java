
import build_in_class.People;
import build_in_class.crypto;
import build_in_class.pass_proct;
import build_in_class.SendEmail;
import build_in_class.user_configuration;
import build_in_class.crypto;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.io.IOException;

import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.security.SignatureException;
import java.security.spec.InvalidKeySpecException;

import static java.sql.JDBCType.NULL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.mail.MessagingException;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;

import org.bouncycastle.util.encoders.Hex;
import javax.swing.JCheckBox;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author quang
 */
public class compose_window extends javax.swing.JFrame {

    /**
     * Creates new form compose_window
     */
    private JFrame composeWindow;

	/**
	 * Launch the application.
	 */
	public static void compose_Window() {
		EventQueue.invokeLater(new Runnable() {
                        @Override
			public void run() {
				try {
					compose_window window = new compose_window();
					window.composeWindow.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
    public compose_window() {
        initialize();
        initComponents();
    }
    
    private void initialize() {
		composeWindow = new JFrame();
		composeWindow.setMinimumSize(new Dimension(1024, 720));
		composeWindow.setResizable(false);
		composeWindow.setTitle("Compose Message");
		composeWindow.setBounds(100, 100, 450, 300);
		composeWindow.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

	}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        buttonGroup1 = new javax.swing.ButtonGroup();
        lblPassword = new javax.swing.JLabel();
        lblCc = new javax.swing.JLabel();
        lblSubject = new javax.swing.JLabel();
        lblContent = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtMailContent = new javax.swing.JTextArea();
        txtCc = new javax.swing.JTextField();
        txtSubject = new javax.swing.JTextField();
        lblReceiver = new javax.swing.JLabel();
        txtReceiver = new javax.swing.JTextField();
        btnSend = new javax.swing.JButton();
        txtPassword = new javax.swing.JPasswordField();
        checkNormal = new javax.swing.JCheckBox();
        checkEncrypt = new javax.swing.JCheckBox();
        checkNonSym = new javax.swing.JCheckBox();
        checkSym = new javax.swing.JCheckBox();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Compose");

        lblPassword.setText("Password");

        lblCc.setText("Cc");

        lblSubject.setText("Sub");

        lblContent.setText("Content");

        txtMailContent.setColumns(20);
        txtMailContent.setRows(5);
        jScrollPane2.setViewportView(txtMailContent);

        txtCc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        txtSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        lblReceiver.setText("Receiver");

        txtReceiver.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtReceiver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtReceiverActionPerformed(evt);
            }
        });

        btnSend.setBackground(new java.awt.Color(0, 0, 255));
        btnSend.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnSend.setForeground(new java.awt.Color(255, 255, 255));
        btnSend.setText("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        txtPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordActionPerformed(evt);
            }
        });

        buttonGroup1.add(checkNormal);
        checkNormal.setText("Normal");
        checkNormal.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                checkNormalStateChanged(evt);
            }
        });
        checkNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkNormal(evt);
            }
        });

        buttonGroup1.add(checkEncrypt);
        checkEncrypt.setSelected(true);
        checkEncrypt.setText("Encrypt");
        checkEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkEncrypt(evt);
            }
        });

        checkNonSym.setText("ASymmetric");

        checkSym.setText("Symmetric");
        
        checkSignature = new JCheckBox("Signature");
        
        checkRawText = new JCheckBox("Raw text");
        
        checkEncryptedText = new JCheckBox("Encrypted text");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGap(56)
        			.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        				.addComponent(btnSend)
        				.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        					.addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 529, GroupLayout.PREFERRED_SIZE)
        					.addComponent(lblContent)
        					.addGroup(layout.createSequentialGroup()
        						.addGroup(layout.createParallelGroup(Alignment.LEADING)
        							.addComponent(lblPassword)
        							.addComponent(lblCc)
        							.addComponent(lblSubject))
        						.addPreferredGap(ComponentPlacement.UNRELATED)
        						.addGroup(layout.createParallelGroup(Alignment.LEADING)
        							.addComponent(txtSubject)
        							.addGroup(layout.createSequentialGroup()
        								.addGroup(layout.createParallelGroup(Alignment.TRAILING, false)
        									.addComponent(txtPassword)
        									.addComponent(txtCc, GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE))
        								.addGap(18)
        								.addComponent(lblReceiver)
        								.addPreferredGap(ComponentPlacement.UNRELATED)
        								.addComponent(txtReceiver))))))
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        					.addGroup(layout.createSequentialGroup()
        						.addGap(54)
        						.addGroup(layout.createParallelGroup(Alignment.LEADING)
        							.addComponent(checkNormal)
        							.addComponent(checkEncrypt)
        							.addComponent(checkSignature))
        						.addContainerGap(60, Short.MAX_VALUE))
        					.addGroup(layout.createSequentialGroup()
        						.addPreferredGap(ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
        						.addGroup(layout.createParallelGroup(Alignment.LEADING)
        							.addComponent(checkSym)
        							.addComponent(checkNonSym))
        						.addGap(50)))
        				.addGroup(Alignment.TRAILING, layout.createSequentialGroup()
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(checkEncryptedText)
        						.addComponent(checkRawText, GroupLayout.PREFERRED_SIZE, 99, GroupLayout.PREFERRED_SIZE))
        					.addGap(30))))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGap(28)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(lblPassword)
        				.addComponent(lblReceiver)
        				.addComponent(txtReceiver, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(txtPassword, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(checkNormal))
        			.addGap(21)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(lblCc)
        				.addComponent(txtCc, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(checkEncrypt))
        			.addGap(17)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(lblSubject)
        				.addComponent(txtSubject, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(checkNonSym))
        			.addGap(19)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(lblContent)
        				.addComponent(checkSym))
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addGap(23)
        					.addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 186, GroupLayout.PREFERRED_SIZE)
        					.addGap(40)
        					.addComponent(btnSend))
        				.addGroup(layout.createSequentialGroup()
        					.addGap(18)
        					.addComponent(checkSignature)
        					.addGap(18)
        					.addComponent(checkRawText)
        					.addGap(18)
        					.addComponent(checkEncryptedText)))
        			.addContainerGap(38, Short.MAX_VALUE))
        );
        getContentPane().setLayout(layout);

        lblPassword.getAccessibleContext().setAccessibleName("Mật khẩu");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        // TODO add your handling code here:
        String pass = "";
        String recv = "";
        String cc = "";
        String sub = "";
        String content = "";
        
        sub = sub + txtSubject.getText();
        recv = recv + txtReceiver.getText();
        content = content + txtMailContent.getText();
        SendEmail send = new SendEmail();
        People p = new People();
        try
        {
            p.write2flie(recv);
        } catch (IOException ex) {
            Logger.getLogger(compose_window.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // prompt to require password
        JPanel panel = new JPanel();
		JLabel label = new JLabel("Enter your email password:");
		JPasswordField passwd = new JPasswordField(10);
		panel.add(label);
		panel.add(passwd);
		String[] opts = new String[]{"OK", "Cancel"};
		String resultPass = null;
		int option = JOptionPane.showOptionDialog(null, panel, "Password Requirement",
		                         JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE,
		                         null, opts, opts[0]);
		
		if(option == 0) // pressing OK button
		{
		    char[] password = passwd.getPassword();
		    resultPass = new String(password);
		    if (!pass_proct.authentication(resultPass))
		    {
		    	JOptionPane.showMessageDialog(this, "Wrong Password!");
		    	panel.setVisible(true);
		    }
		}
		else if(option == 1)
		{
			panel.setVisible(true);
		}
        
		// end prompt to require password
		
        if (checkNormal.isSelected() == true)
        {
            try {
                user_configuration user = new user_configuration();
                user.password = resultPass;
                String emailsender = user.username + "@" + user.host + ".com";
                System.out.println("Sender:" + emailsender);
                send.send(recv, sub, content, emailsender, user.password);
            } catch (IOException ex) {
                Logger.getLogger(compose_window.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MessagingException ex) {
                Logger.getLogger(compose_window.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            if (checkEncrypt.isSelected() == true)
            {
                pass = pass + txtPassword.getText();
                crypto sender = new crypto();
                crypto receiver = new crypto();
                
                try {
                    if (checkNonSym.isSelected() == true)
                    {
                        user_configuration user = new user_configuration();
                        user.password = resultPass;
                        String emailsender = user.username + "@" + user.host + ".com";
                        System.out.println("Sender:" + emailsender);
                        
                        sender.importKey(emailsender, 1);
                        receiver.importKey(recv, 0); // recv hold receiver password
                        SecretKey k = sender.secretKeyGen_S(pass);
                        // sign to raw data
                        String sign_s = "";
                        if(this.checkSignature.isSelected() == true && this.checkRawText.isSelected() == true) // sign to raw text
                        {
                        	try
                        	{
								byte[] sign = sender.sign(content);
								sign_s = new String(Hex.encode(sign));
								//content = content + "\nR\n#" + sign_s + "#";
							} catch (SignatureException e1)
                        	{
								// TODO Auto-generated catch block
								e1.printStackTrace();
							}
                        }
                        
                        byte [] e = sender.encryptAsymmetric(content, k, receiver.pub, 0);
                        String temp = "A " + "\n<" + new String(Hex.encode(e)) + ">";
                        // sign to encrypted data
                        if (this.checkSignature.isSelected() == true && this.checkEncryptedText.isSelected() == true)
                        {
                        	byte[] sign;
							try 
							{
								sign = sender.sign(new String(Hex.encode(e)));
	                        	sign_s = new String(Hex.encode(sign));
								//temp = temp + "\nE\n#" + sign_s + "#";
							} catch (SignatureException e1) 
							{
								// TODO Auto-generated catch block
								e1.printStackTrace();
							}
                        }
                        System.out.println("Sending: \n" + temp);
                        
                        if (this.checkEncryptedText.isSelected() == true)
							temp = temp + "\nE\n#" + sign_s + "#";
                        else
                        	temp = temp + "\nR\n#" + sign_s + "#";
                        send.send(recv, sub, temp, emailsender, user.password);
                    }
                    else
                    {
                        if (checkSym.isSelected() == true)
                        {
                            user_configuration user = new user_configuration();
                            user.password = resultPass;
                            String emailsender = user.username + "@" + user.host + ".com";
                            System.out.println("Sender:" + emailsender);
                       

                    		sender.importKey(emailsender, 1);
                            SecretKey k = sender.secretKeyGen_S(pass);
                            
                            // sign to raw data
                            String sign_s = "";
                            if(this.checkSignature.isSelected() == true && this.checkRawText.isSelected() == true) // sign to raw text
                            {
                            	try
                            	{
    								byte[] sign = sender.sign(content);
    								sign_s = new String(Hex.encode(sign));
    							} catch (SignatureException e1)
                            	{
    								// TODO Auto-generated catch block
    								e1.printStackTrace();
    							}
                            }
                            
                            byte [] e = sender.encryptSymmetric(content, k , 0);
                            String temp = "S " + "\n<" + new String(Hex.encode(e)) + ">";
                            
                            // sign to encrypted data
                            if (this.checkSignature.isSelected() == true && this.checkEncryptedText.isSelected() == true)
                            {
                            	byte[] sign;
    							try 
    							{
    								
    								sign = sender.sign(new String(Hex.encode(e)));
    	                        	sign_s = new String(Hex.encode(sign));
    								//temp = temp + "\nE\n#" + sign_s + "#";
    							} catch (SignatureException e1) 
    							{
    								// TODO Auto-generated catch block
    								e1.printStackTrace();
    							}
                            }
                            if (this.checkEncryptedText.isSelected() == true)
                            	temp = temp + "\nE\n#" + sign_s + "#";
                            else
                            	temp = temp + "\nR\n#" + sign_s + "#";
                            	
                            System.out.println("Sending: \n" + temp);
                            send.send(recv, sub, temp, emailsender, user.password);
                        }
                    }
                } catch (IOException ex) {
                    Logger.getLogger(compose_window.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InvalidKeySpecException ex) {
                    Logger.getLogger(compose_window.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NoSuchAlgorithmException ex) {
                    Logger.getLogger(compose_window.class.getName()).log(Level.SEVERE, null, ex);
                } catch (MessagingException ex) {
                    Logger.getLogger(compose_window.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InvalidKeyException ex) {
                    Logger.getLogger(compose_window.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NoSuchPaddingException ex) {
                    Logger.getLogger(compose_window.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalBlockSizeException ex) {
                    Logger.getLogger(compose_window.class.getName()).log(Level.SEVERE, null, ex);
                } catch (BadPaddingException ex) {
                    Logger.getLogger(compose_window.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    	JOptionPane.showMessageDialog(this, "Message Sent!");
        this.dispose();
    }//GEN-LAST:event_btnSendActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void txtReceiverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtReceiverActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtReceiverActionPerformed

    private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPasswordActionPerformed

    private void checkNormalStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_checkNormalStateChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_checkNormalStateChanged

    private void checkEncrypt(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encrypt
        txtPassword.setEnabled(true);
    }//GEN-LAST:event_encrypt

    private void checkNormal(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkNormal
        txtPassword.setEnabled(false);
    }//GEN-LAST:event_checkNormal

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(compose_window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(compose_window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(compose_window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(compose_window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new compose_window().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox checkEncrypt;
    private javax.swing.JCheckBox checkNonSym;
    private javax.swing.JCheckBox checkNormal;
    private javax.swing.JCheckBox checkSym;
    private JCheckBox checkSignature;
    private JCheckBox checkRawText;
    private JCheckBox checkEncryptedText;
    private javax.swing.JButton btnSend;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblCc;
    private javax.swing.JLabel lblSubject;
    private javax.swing.JLabel lblContent;
    private javax.swing.JLabel lblReceiver;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea txtMailContent;
    private javax.swing.JTextField txtCc;
    private javax.swing.JTextField txtSubject;
    private javax.swing.JTextField txtReceiver;
    private javax.swing.JPasswordField txtPassword;
}
