/**
 *
 * @author nguye
 */

import build_in_class.*;
//import build_in_class.constant;

import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.mail.Address;
import javax.mail.BodyPart;
import javax.mail.Flags;
import javax.mail.Folder;
import javax.mail.Message;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.Store;
import javax.mail.UIDFolder;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import java.awt.Dimension;
import java.awt.BorderLayout;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JToolBar;
import javax.swing.JButton;
import java.awt.Button;
import javax.swing.JList;
import javax.swing.JOptionPane;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.SignatureException;
import java.security.spec.InvalidKeySpecException;
import java.util.Properties;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JTable;
import javax.swing.JScrollPane;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.table.DefaultTableModel;

import org.bouncycastle.util.encoders.Hex;

import java.awt.Component;
import javax.swing.JTextPane;
import javax.swing.JLabel;
import java.awt.Toolkit;


public class gui extends javax.swing.JFrame {

    /**
     * Creates new form gui
     * @throws IOException 
     */
    public gui() throws IOException {
    	setIconImage(Toolkit.getDefaultToolkit().getImage("D:\\Study\\6th Term\\Network Security\\Project\\1\\Java_Mail_Client\\img\\sad-bubble.jpg"));

    	try
		{
			File currentDirectory = new File(new File(".").getAbsolutePath());
			String p = currentDirectory.getCanonicalPath();
			p = p + "\\user\\user.cfg";
			BufferedReader b = new BufferedReader(new FileReader(p));
		}
		catch (FileNotFoundException e1)
		{
			u = new user_configuration(false);
		}
		u = new user_configuration(true);
		u.readFile();
		u.printInfo();
		if(!u.isConfig())
		{
			first_run f = new first_run();
			f.first_Run();
		}
		else
		{
			JPanel panel = new JPanel();
			JLabel label = new JLabel("Enter your email password:");
			JPasswordField pass = new JPasswordField(10);
			panel.add(label);
			panel.add(pass);
			String[] opts = new String[]{"OK", "Cancel"};
			String result = null;
			int option = JOptionPane.showOptionDialog(null, panel, "Password Requirement",
			                         JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE,
			                         null, opts, opts[0]);
			if(option == 0) // pressing OK button
			{
			    char[] password = pass.getPassword();
			    result = new String(password);
			    u.password = result;
			    if (!pass_proct.authentication(result))
			    {
			    	JOptionPane.showMessageDialog(this, "Wrong Password!");
			    	System.exit(1);
			    }
			}
			else if(option == 1)
			{
		    	System.exit(1);
			}
		}

    	recv = new ReceiveMail();
    	cryp = new crypto();
    	
    	if(this.hasKey() != 1) // privateKey is not exist
    	{
    		try
    		{
				cryp.keyPairGenerator();
				//cryp.exportKey(cryp.keyPairGenerator(), u.username + "@" + u.host + ".com", 1);
			} catch (NoSuchAlgorithmException e)
    		{
				e.printStackTrace();
			}
    		
    	}
    	
    	addWindowListener(new WindowAdapter() 
    	{
    		@Override
    		public void windowOpened(WindowEvent arg0) 
    		{
    			if(u.isConfig())
				{
    				try
    				{
						recv.LoadEmail();
						updateValueListMail();
					} catch (NumberFormatException | IOException e)
    				{
						e.printStackTrace();
					}
    				updateValueListMail();
					//recv.recv_mail(u.host, u.username, u.password, u.i_or_p);
    				//recv.LoadEmail();
					//recv.printListMail();
					System.out.println("Load Email Successfull");
					//recv.recv_mail(u.host, u.username, u.password, u.i_or_p);
					recv.printListMail();
					updateValueListMail();
					//updateValueListMail();
				}
    		}
    	});
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents()
    {

        btnGetMessages = new javax.swing.JButton();
        btnCompose = new javax.swing.JButton();
        btnPeople = new javax.swing.JButton();
        btnPeople.addActionListener(new ActionListener()
        {
        	public void actionPerformed(ActionEvent evt)
        	{
        		btnPeopleActionPerformed(evt);
        	}
        });
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableMail = new javax.swing.JTable();
        MailContent = new JTextPane();
        lblFrom = new JLabel("From: ");
        lblDate = new JLabel("Date:");
        lblSubject = new JLabel("Subject:");
        btnDelete = new javax.swing.JButton();
        btnIm_Export = new javax.swing.JButton();

		//setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Java Mail Client 1312086 1312110");
        setMaximumSize(new java.awt.Dimension(1920, 1080));
        setMinimumSize(new java.awt.Dimension(1366, 768));
        setName("main_window"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1366, 768));
        setResizable(false);

        btnGetMessages.setText("Get Messages");        
        btnGetMessages.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                try {
					btnGetMessagesActionPerformed(evt);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });

        btnCompose.setText("Compose");

        btnPeople.setText("People");

        tableMail.setModel(ListMail);
        setValueListMail();
        jScrollPane1.setViewportView(tableMail);
        tableMail.getAccessibleContext().setAccessibleName("tableMail");
        tableMail.repaint();
        
        MailContent.setText("");
        jScrollPane2.setViewportView(MailContent);
        
        tableMail.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                tableMailMouseClicked(evt);
            }
        });

        btnCompose.addActionListener(new ActionListener()
        {
        	public void actionPerformed(ActionEvent arg0) 
        	{
        		compose_window c = new compose_window();
				//c.compose_Window();
				c.show();
        	}
        });
        
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try 
                {
					btnDeleteActionPerformed(evt);
				} catch (IOException e)
                {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });
        
        btnIm_Export.setText("Import/Export Key");
        btnIm_Export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIm_ExportActionPerformed(evt);
            }
        });
        
        btnDecrypt = new JButton("Decrypt");
        btnDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIm_DecryptActionPerformed(evt);
            }
        });
        
        lblStatus = new JLabel("Status:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addGap(22)
        					.addComponent(btnGetMessages)
        					.addGap(18)
        					.addComponent(btnCompose)
        					.addGap(18)
        					.addComponent(btnPeople)
        					.addGap(18)
        					.addComponent(btnDelete))
        				.addGroup(layout.createSequentialGroup()
        					.addGap(278)
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(lblFrom)
        						.addComponent(lblSubject)
        						.addComponent(lblDate)
        						.addGroup(layout.createParallelGroup(Alignment.TRAILING, false)
        							.addGroup(layout.createSequentialGroup()
        								.addGap(120)
        								.addComponent(btnDecrypt)
        								.addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        								.addComponent(btnIm_Export))
        							.addComponent(jScrollPane1, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 1057, Short.MAX_VALUE)
        							.addComponent(jScrollPane2, Alignment.LEADING))))
        				.addGroup(layout.createSequentialGroup()
        					.addContainerGap()
        					.addComponent(lblStatus)))
        			.addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(btnGetMessages)
        				.addComponent(btnCompose)
        				.addComponent(btnPeople)
        				.addComponent(btnDelete)
        				.addComponent(btnIm_Export)
        				.addComponent(btnDecrypt))
        			.addGap(26)
        			.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 236, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(lblFrom)
        			.addGap(12)
        			.addComponent(lblSubject)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(lblDate)
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 330, GroupLayout.PREFERRED_SIZE)
        			.addGap(11)
        			.addComponent(lblStatus)
        			.addContainerGap())
        );
        getContentPane().setLayout(layout);
        getContentPane().setLayout(layout);

        btnCompose.getAccessibleContext().setAccessibleName("btnCompose");
        btnPeople.getAccessibleContext().setAccessibleName("btnPeople");

        pack();
    }// </editor-fold>                        
    
    private void tableMailMouseClicked(java.awt.event.MouseEvent evt)
    {                                       
        // TODO add your handling code here:
    	int index = tableMail.getSelectedRow();
    	
    	if (index >= 0)
    	{
    		MailItem m = new MailItem();
    		m.id = Integer.parseInt(ListMail.getValueAt(index, 0).toString());
    		try
    		{
				m.readfile();
			} catch (IOException e)
    		{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    		String content = m.content.toString();
    		int i = 1;
    		content.replaceAll(" http", "\nhttp");
    		while (i*175 < content.length())
    		{
    			int j = i*175;
    			while (content.charAt(j) != ' ')
    			{
    				j++;
    				if (j == content.length() - 1)
    					break;
    			}
    			
    			String pre = content.substring(0, j);
    			String post = "\n" + content.substring(j + 1, content.length());
    			content = pre + post;
    			i++;
    		}
    		MailContent.setText(content);
    		lblFrom.setText("From: " + m.from.name + " <" + m.from.emailAddr + ">");
    		lblSubject.setText("Subject: "+ m.subject);
    		lblDate.setText("Date: " + m.date.Date2String());
    	}
    }     
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run() {
                try {
					new gui().setVisible(true);
				} catch (IOException e)
                {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });
    }
    
	private void setValueListMail()
	{
		ListMail.addColumn("ID");
		ListMail.addColumn("From");
		ListMail.addColumn("Subject");
		ListMail.addColumn("Date");
	}
	
	private void updateValueListMail()
	{
    	while(ListMail.getRowCount() > 0)
    	{
    		ListMail.removeRow(0);
    	}
    	
    	for(int i= 0; i < recv.listMail.size(); i++)
    	{
    		ListMail.addRow(new Object[]{recv.listMail.get(i).id, recv.listMail.get(i).from.name, recv.listMail.get(i).subject, recv.listMail.get(i).date.Date2String()});
    	}
    	tableMail.repaint();
	}
	
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) throws IOException
    {
    	Object[] options = {"Local Only",
                "Remote Only",
                "Local & Remote", "Cancel"};
		int n = JOptionPane.showOptionDialog(this,
		"Where do you want to remove?",
		"Remove Message Confirmation",
		JOptionPane.YES_NO_CANCEL_OPTION,
		JOptionPane.QUESTION_MESSAGE,
		null,
		options,
		options[3]);
		

		int i  = tableMail.getSelectedRow();
		long uid = Long.parseLong(tableMail.getValueAt(i, 0).toString());
		if(n == 0) // Local Only
		{
			for (int j = 0; j < recv.listMail.size(); j++)
			{
				if(recv.listMail.get(j).id == uid)
				{
					System.out.println("Delete Mail " + uid + " from local");
					System.out.println("Index: " + j);
					recv.deletedMail.add(recv.listMail.get(j));
					recv.StoreDeletedMail();
					updateValueListMail();
					break;
				}
			}
		}
		else if(n == 1) // Remote Only
		{
			del_mail(uid, u.host, u.username, u.password, u.i_or_p);
			System.out.println("Delete Mail " + uid + " from remote");
		}
		else if(n == 2) // Local and Remote
		{
			for (int j = 0; j < recv.listMail.size(); j++)
			{
				if(recv.listMail.get(j).id == uid)
				{
					System.out.println("Index: " + j);
					recv.deletedMail.add(recv.listMail.get(j));
					recv.StoreDeletedMail();
					del_mail(uid, u.host, u.username, u.password, u.i_or_p);
					System.out.println("Delete Mail " + uid + " from local and remote");
					updateValueListMail();
					break;
				}
			}
		}
    }   
	
    public void del_mail(long UID, String host, String user, String pass, boolean mode) // mode == true (imap), mode == false (pop3)
	{
		Properties props = new Properties();
		
		if(mode == true) // using imap
		{
			props.setProperty("mail.store.protocol", "imaps");
			try 
			{
	            Session session = Session.getInstance(props, null);
	            Store store = session.getStore();
	            if(host.equals("gmail"))
	            	store.connect(constant.gmail_imap_host, user, pass);
	            if(host.equals("yahoo"))
	            	store.connect(constant.yahoo_imap_host, user, pass);
	            Folder inbox = store.getFolder("INBOX");
	            inbox.open(Folder.READ_WRITE);
	            UIDFolder uf = (UIDFolder)  inbox;
	            long uid = 0;
	            Message[] msg = inbox.getMessages();
	            for(int i = 0; i< msg.length; i++)
	            {
	            	Message mess = msg[i];
	            	uid = uf.getUID(mess);
	            	if (uid == UID)
	            		msg[i].setFlag(Flags.Flag.DELETED, true);
	            }
	            inbox.close(true);
	            store.close();
			} catch (Exception mex)
			{
	            mex.printStackTrace();
	        }
		}
		else // using pop3
		{
			props.setProperty("mail.store.protocol", "pop3s");
			try 
			{
	            Session session = Session.getInstance(props, null);
	            Store store = session.getStore();
	            if(host.equals("gmail"))
	            	store.connect(constant.gmail_pop3_host, user, pass);
	            if(host.equals("yahoo"))
	            	store.connect(constant.yahoo_pop3_host, user, pass);
	            Folder inbox = store.getFolder("INBOX");
	            inbox.open(Folder.READ_WRITE);
	            UIDFolder uf = (UIDFolder)  inbox;
	            long uid = 0;
	            Message[] msg = inbox.getMessages();
	            for(int i = 0; i< msg.length; i++)
	            {
	            	Message mess = msg[i];
	            	uid = uf.getUID(mess);
	            	if (uid == UID)
	            		msg[i].setFlag(Flags.Flag.DELETED, true);
		        }
	            inbox.close(true);
	            store.close();
	        } catch (Exception mex)
			{
	            mex.printStackTrace();
	        }
		}
	}
    
    private void btnGetMessagesActionPerformed(java.awt.event.ActionEvent evt) throws IOException
    {
    	u.readFile();
    	
    	// prompt to require password for receiving messages
    	JPanel panel = new JPanel();
		JLabel label = new JLabel("Enter your email password:");
		JPasswordField pass = new JPasswordField(10);
		panel.add(label);
		panel.add(pass);
		String[] opts = new String[]{"OK", "Cancel"};
		String result = null;
		int option = JOptionPane.showOptionDialog(null, panel, "Password Requirement",
		                         JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE,
		                         null, opts, opts[0]);
		if(option == 0) // pressing OK button
		{
		    char[] password = pass.getPassword();
		    result = new String(password);
		    u.password = result;
		    if (!pass_proct.authentication(result))
		    {
		    	JOptionPane.showMessageDialog(this, "Wrong Password!");
		    	return;
		    }
		}
		else if(option == 1)
		{
	    	return;
		}
    	
    	lblStatus.setText("Status: Receiving Messages");
    	lblStatus.repaint();
    	recv.recv_mail(u.host, u.username + "@" + u.host + ".com", u.password, u.i_or_p);
		updateValueListMail();

    	lblStatus.setText("Status:");
    }       
    
    private void btnIm_ExportActionPerformed(java.awt.event.ActionEvent evt)
    {
    	Object[] options = {"Import Public Key Only",
                "Import Pub/Pri Key",
                "Export Public Key Only", "Export Pub/Pri Key", "Cancel"};
		int n = JOptionPane.showOptionDialog(this,
		"Which do you want to im/export?",
		"Import/Export Key Confirmation",
		JOptionPane.YES_NO_CANCEL_OPTION,
		JOptionPane.QUESTION_MESSAGE,
		null,
		options,
		options[4]);
		
		if (n == 0)
		{
			try
			{
				if(this.hasKey() == 0) // pubKey is not exist
				{
					JOptionPane.showMessageDialog(this, "You have to export public key first");
				}
				else
				{
					cryp.importKey(u.username + "@" + u.host + ".com",  0);
				}
			} catch (IOException | InvalidKeySpecException | NoSuchAlgorithmException e)
			{
				e.printStackTrace();
			}
		}
		else if (n == 1)
		{
			try
			{
				if(this.hasKey() == -1) // priKey is not exist
				{
					JOptionPane.showMessageDialog(this, "You have to export public/private key first");
				}
				else
				{
					JPanel panel = new JPanel();
					JLabel label = new JLabel("Enter password to unlock private key:");
					JPasswordField pass = new JPasswordField(10);
					panel.add(label);
					panel.add(pass);
					String[] opts = new String[]{"OK", "Cancel"};
					String result = null;
					int option = JOptionPane.showOptionDialog(null, panel, "Password Requirement",
					                         JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE,
					                         null, opts, opts[1]);
					if(option == 0) // pressing OK button
					{
					    char[] password = pass.getPassword();
					    result = new String(password);
					    System.out.println("Your password is: " + new String(password));
					}
					
					if(!(result == null || result.equals("")))
					{
						try
						{
							cryp.deProtectPrivate(u.username + "@" + u.host + ".com", result);
							cryp.importKey(u.username + "@" + u.host + ".com",  1);
							cryp.protectPrivate(u.username + "@" + u.host + ".com", result);
						} catch (InvalidKeyException | NoSuchPaddingException | IllegalBlockSizeException
								| BadPaddingException e)
						{
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					else
					{
						JOptionPane.showMessageDialog(this, "Password is blank, try again");
					}
				}
			} catch (IOException | InvalidKeySpecException | NoSuchAlgorithmException e)
			{
				e.printStackTrace();
			}
		}
		else if (n == 2) // export publicKey only
		{
			try
			{
				u.readFile();
				cryp.exportKey(cryp.kp, u.username + "@" + u.host + ".com", 0);
			} catch (InvalidKeySpecException | NoSuchAlgorithmException | IOException e)
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		else if (n == 3) // export pub/pri key
		{
			try
			{
				JPanel panel = new JPanel();
				JLabel label = new JLabel("Enter password to lock private key:");
				JPasswordField pass = new JPasswordField(10);
				panel.add(label);
				panel.add(pass);
				String[] opts = new String[]{"OK", "Cancel"};
				String result = null;
				int option = JOptionPane.showOptionDialog(null, panel, "Password Requirement",
				                         JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE,
				                         null, opts, opts[0]);
				if(option == 0) // pressing OK button
				{
				    char[] password = pass.getPassword();
				    result = new String(password);
				    System.out.println("Your password is: " + new String(password));
				}
				
				if (!(result == null || result.equals("")))
				{
					try
					{
						if(hasKey() == 1)
						{
							cryp.deProtectPrivate(u.username + "@" + u.host + ".com", result);
							cryp.importKey(u.username + "@" + u.host + ".com", 1);
						}
						cryp.exportKey(cryp.kp, u.username + "@" + u.host + ".com", 1);
						cryp.protectPrivate(u.username + "@" + u.host + ".com", result);
					} catch (InvalidKeyException | NoSuchPaddingException | IllegalBlockSizeException
							| BadPaddingException e)
					{
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				else
				{
					JOptionPane.showMessageDialog(this, "Password is blank, try again");
				}
			} catch (InvalidKeySpecException | NoSuchAlgorithmException | IOException e)
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		else if (n == 4)
		{
			// cancel
		}
    }         
    
    private void btnIm_DecryptActionPerformed(java.awt.event.ActionEvent evt)
    {
    	int index = tableMail.getSelectedRow();
    	long uid = Long.valueOf(tableMail.getValueAt(index, 0).toString());
    	MailItem m = new MailItem();
    	for(int i = 0; i < recv.listMail.size(); i++)
    	{
    		if(recv.listMail.get(i).id == uid)
    		{
    			m = recv.listMail.get(i);
    		}
    	}
    	
    	String temp = (String) m.content;
    	char flag = temp.charAt(0);
    	char flag_sign = temp.charAt(temp.indexOf('>') + 2);
    	String sign = temp.substring(temp.indexOf('#') + 1, temp.lastIndexOf('#'));
		temp = temp.substring(temp.indexOf('<') + 1, temp.lastIndexOf('>'));
		
		System.out.println("Encrypted: '" + temp + "'");
		System.out.println("Signature: '" + sign + "'");
    	if(flag == 'S') // Symmetric
    	{
    		// prompt to require password for decryption
    		JPanel panel = new JPanel();
			JLabel label = new JLabel("Enter a password to decrypt:");
			JPasswordField pass = new JPasswordField(10);
			panel.add(label);
			panel.add(pass);
			String[] opts = new String[]{"OK", "Cancel"};
			String passwd = null;
			int option = JOptionPane.showOptionDialog(null, panel, "Password Requirement",
			                         JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE,
			                         null, opts, opts[0]);
			if(option == 0) // pressing OK button
			{
			    char[] password = pass.getPassword();
			    passwd = new String(password);
			    System.out.println("Your password is: " + new String(password));
			}
			
			// end prompt
			
			SecretKey k;
			try
			{
				boolean i = false;
				if (flag_sign == 'E')
				{
					crypto d = new crypto();
					byte[] sign_recv = Hex.decode(sign);
					try
					{
						i = d.very_sign(sign_recv, recv.listMail.get(index).from.emailAddr, temp.getBytes());
					} catch (InvalidKeySpecException | SignatureException | IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				
				k = cryp.secretKeyGen_S(passwd);
	    		String result = cryp.decryptSymmetric(Hex.decode(temp), k, 0);
	    		
	    		if (flag_sign == 'R')
	    		{
					crypto d = new crypto();
					byte[] sign_recv = Hex.decode(sign);
					try
					{
						i = d.very_sign(sign_recv, recv.listMail.get(index).from.emailAddr, result.getBytes());
					} catch (InvalidKeySpecException | SignatureException | IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
	    		}
	    		
	    		if(i == true)
	    			result = result + "\n<Sender Verified>";
	    		else
	    			result = result + "\n<Sender NOT Verified>";
	    		
	    		System.out.println("Decrypted: " + result);
	    		this.MailContent.setText(result);
			} catch (NoSuchAlgorithmException | UnsupportedEncodingException | InvalidKeyException | NoSuchPaddingException | IllegalBlockSizeException | BadPaddingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
    	}
    	else
    		if(flag == 'A') // Asymmetric
    		{
    			try
    			{
					cryp.importKey(u.username + "@" + u.host + ".com", 1);
				} catch (InvalidKeySpecException | NoSuchAlgorithmException | IOException e)
    			{
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
    	    	byte[] encrypted = Hex.decode(temp);
    	    	
    	    	boolean i = false;
				if (flag_sign == 'E')
				{
					crypto d = new crypto();
					byte[] sign_recv = Hex.decode(sign);
					try
					{
						i = d.very_sign(sign_recv, recv.listMail.get(index).from.emailAddr, temp.getBytes());
					} catch (InvalidKeySpecException | SignatureException | IOException | InvalidKeyException | NoSuchAlgorithmException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				
    	    	String decrypted = cryp.decryptAsymmetric(encrypted, 0);
    	    	
    	    	if (flag_sign == 'R')
	    		{
					crypto d = new crypto();
					byte[] sign_recv = Hex.decode(sign);
					try
					{
						i = d.very_sign(sign_recv, recv.listMail.get(index).from.emailAddr, decrypted.getBytes());
					} catch (InvalidKeySpecException | SignatureException | IOException | InvalidKeyException | NoSuchAlgorithmException e)
					{
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
	    		}
	    		
	    		if(i == true)
	    			decrypted = decrypted + "\n<Sender Verified>";
	    		else
	    			decrypted = decrypted + "\n<Sender NOT Verified>";
	    			
    			System.out.println("Decrypted: " + decrypted);
    			MailContent.setText(decrypted);
    		}
    }
    
    private void btnPeopleActionPerformed(java.awt.event.ActionEvent evt)
    {
    	people_window p = new people_window();
    	p.show();
    }
    
    public int hasKey() throws IOException
    {
    	File currentDirectory = new File(new File(".").getAbsolutePath());
		String p = currentDirectory.getCanonicalPath();
		p = p + "\\keys";
		String temp = p + "\\priKey_" + u.username;
    	File f = new File (temp);
    	
    	if (f.exists() == false)
    	{
    		System.out.println("PriKey does not exist");
    		return -1; // priKey is not exist
    	}
    	temp = p + "\\pubKey_" + u.username;
    	f = new File(temp);
    	if (f.exists() == false)
    	{
    		System.out.println("PubKey does not exist");
    		return 0; // pubKey is not exist
    	}
    	
    	return 1;
    }
    
    // Variables declaration - do not modify                     
    private javax.swing.JButton btnCompose;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnGetMessages;
    private javax.swing.JButton btnIm_Export;
    private javax.swing.JButton btnPeople;
    private javax.swing.JButton btnDecrypt;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableMail;
    private JLabel lblStatus;
	private user_configuration u;
	private ReceiveMail recv;
	private crypto cryp;
	private DefaultTableModel ListMail = new DefaultTableModel();
	JTextPane MailContent;
	JLabel lblFrom;
	private JLabel lblDate;
	private JLabel lblSubject;
}
